plugins {
    id 'java-library'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

ext {
	junitVersion = '5.8.2'
	assertjVersion = '3.22.0'
}

dependencies {

	// JSON-B
	implementation group: 'javax.json.bind', name: 'javax.json.bind-api', version: '1.0'
    implementation group: 'org.eclipse', name: 'yasson', version: '1.0.2'
    implementation  group: 'org.glassfish', name: 'javax.json', version: '1.1.4'
    
    // Json Web Token (JWT)
	implementation 'com.auth0:java-jwt:3.18.3'
    
    // JUnit5-Testing
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "${junitVersion}"
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "${junitVersion}"
    testImplementation group: 'org.assertj', name: 'assertj-core', version: "${assertjVersion}"
    
    // https://mvnrepository.com/artifact/org.junit.platform/junit-platform-suite-api
	testImplementation group: 'org.junit.platform', name: 'junit-platform-suite-api', version: '1.8.2'
    
}

test {
    useJUnitPlatform {
    	// Normale Tests nicht ausfÃ¼hren, nur die Testsuite
    	excludeEngines 'junit-jupiter'
    }
    
    // show standard out and standard error of the test JVM(s) on the console
  	testLogging.showStandardStreams = true
  	// listen to events in the test execution lifecycle
    beforeTest { 
    	//descriptor -> logger.lifecycle("Running test: " + descriptor.getClassName() + ":" + descriptor.getName())
    	descriptor -> logger.lifecycle("Running test: " + descriptor)
  	}
}
